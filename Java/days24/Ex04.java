package days24;
/**
 * @author 송해영
 * @date 2023. 8. 16. - 오후 12:09:20
 * @subject
 * @content
 */
public class Ex04 {

	public static void main(String[] args) {

		/*
		 * [중첩 클래스와 중첩 인터페이스]
		 * 1. 클래스와 클래스들	 간의 관계
		 *  	has - a 관계
		 *  	is - a 관계 (상속)
		 * 2. 어떤 특정 클래스가 특정한 클래스와 관계가 있다면
		 * 			A						B
		 * 		B 라는 클래스 안(내부)에 A 클래스를 선언한다.  ==> 중첩클래스라고 함
		 * 
		 * 3. 중첩 클래스(Nested Class)
		 * 4. 중첩 클래스의 장점? (굳이 내부로 선언하는 이유) 
		 * 		1)중첩으로 선언하면 두 클래스의 멤버들을 서로 쉽게 접근할 수 있다. 
		 * 		2)불필요한 관계들이 있는 클래스를 감춤으로써 코드의 복잡성을 줄일 수 있다.
		 * 5. 예)
		 * 		class A{
		 * 			//필드
		 * 			//메서드
		 * 			//생성자
		 *			//getter, setter
		 *
		 *		class B{ //중첩 클래스
		 *		}
		 * 		
		 * 		interface IC{ //특정 클래스 안에 인터페이스가 선언된 것을 중첩 인터페이스라고 함
		 * 		}
		 * 
		 * 		}
		 * 6. 중첩 클래스의 종류 : 선언 위치에 따라 구분함
		 *		1) 클래스의 멤버 선언
		 *			(1) 인스턴스 멤버 클래스 - A 객체를 생성(new 연산자로)해야 B 중첩 클래스를 사용 할 수 있다.
		 *			(2) 정적(static) 멤버 클래스 - A 클래스로 객체 생성없이 바로 C 중첩 클래스를 사용(접근) 할 수 있다.
		 *
		 *				중첩클래스도 A(외부)$B(내부).class 클래스파일 생성된다.
		 *
		 *		2) 메서드의 내부에 선언 
		 *			(1) 로컬 클래스 - 메서드가 실행될 때만 사용할 수 있다.
		 *				A(외부)$1B(로컬클래스명).class 클래스파일 생성된다.
		 * 
		 * 6-2) 예)
		 * 	class A{
		 * 		int a;  //지역(로컬)변수		
		 * 
		 * 
		 *		//메서드
		 * 		void disp(){
		 * 			int a; //지역(로컬) 변수
		 * 			
		 * 
		 * 
		 * 			class D{메서드의 내부에 선언 - 로컬 클래스 : 접근지정자 사용불가(void disp()메서드가 호출될때만 사용하기때문에 접근지정자 필요없음)
		 * 				static 필드, 메서드는 선언X
		 * 				인스턴스 변수, 메서드는 선언o
		 * 				D(){}
		 * 				int d1;	
		 * 				void test(){
		 * 				}
		 * 
		 * 
		 * 			}//classD
		 * 
		 * 			D obj = new D();....???
		 * 			obj.d1;
		 * 			obj.test();
		 * 
		 * 
		 * 		}//disp 함수
		 * 
		 * 		class B{ 클래스의 멤버 선언 - 인스턴스 멤버 클래스
		 * 			B(){} // 생성자 선언 가능
		 * 			int b1; //인스턴스 필드 선언 가능
		 * 			void test(){} //인스턴스 메서드 선언 가능
		 * 			static 필드, 메서드는 선언 할 수 없다.
		 * 		}
		 * 		예) A a = new A(); 인스턴스 멤버 클래스 B객체를 사용하려면 A 외부 객체 제일 먼저 생성 후에 생성된 외부 객체를 통해서 내부 객체를 생성하고 사용할 수 있음.
		 * 			A.B b = a.new B();
		 * 			b.b1 = 100;
		 * 			b.test();
		 * 
		 * 		
		 * 		static class C{ 클래스의 멤버 선언 - 정적(static) 멤버 클래스
		 * 			//모든 필드, 메서드 선언할 수 있다.
		 * 			int c1;  // 인스턴스 변수 선언 가능
		 * 			static sc1;  //static 변수 선언 가능
		 * 			void test1(){}   // 인스턴스메서드 선언 가능
		 * 			static void test2(){}   //static 메서드 선언가능
		 * 			C(){}  //생성자 선언 가능
		 * 			
		 * 			예) 외부 객체를 생성할 필요가 없다.
		 * 				A.C c = new A.C();
		 * 				c.c1 = 100;
		 * 				c.test1(); 
		 * 
		 * 				A.C.sc1 = 100; //static 변수 가능 (객체생성없이)
		 * 				A.C.test2(); //static 메서드 가능
		 * 	
		 * 		}
		 * 
		 * }//calss A
		 * 
		 * 
		 * */
		
		
	}//main

}//class
